from pyspark.sql import SparkSession, functions as F

# Initialize SparkSession
spark = SparkSession.builder.appName("AppUsageCounter").getOrCreate()

# Read stream from Kafka
raw_df = spark.readStream.format("kafka") \
    .option("kafka.bootstrap.servers", "iapp1318.croydon.ms.com:9092") \
    .option("subscribe", "Log.AppTracker.Usage") \
    .load()

# Extract messages as strings
messages_df = raw_df.selectExpr("cast(value as string) as message")

# Define the delimiter pattern (comma followed by one or more spaces)
delimiter_pattern = r",\s+"

# Split the message into lines (if needed) and then into key-value pairs
lines_df = messages_df.select(F.explode(F.split("message", "\n")).alias("line"))
kv_pairs_df = lines_df.select(F.explode(F.split("line", delimiter_pattern)).alias("kv_pair"))

# Filter out non-key-value pairs and extract the fields of interest along with unique identifier
filtered_kv_pairs_df = kv_pairs_df.filter(~F.col("kv_pair").rlike("^\\s*$")) \
                                 .withColumn("kv_split", F.split("kv_pair", "\\s+")) \
                                 .filter(F.size("kv_split") == 2) \
                                 .select(F.monotonically_increasing_id().alias("id"), F.col("kv_split")[0].alias("key"), F.col("kv_split")[1].alias("value"))

# Filter for the fields of interest and flatten into a single column
interesting_fields_df = filtered_kv_pairs_df.filter(F.col("key").isin("uid", "name", "hostname")) \
                                           .withColumn("prefixed_value", F.concat(F.col("key"), F.lit(": "), F.col("value")))

# Deduplicate based on the prefixed value while preserving the unique identifier
deduplicated_df = interesting_fields_df.dropDuplicates(["prefixed_value"])

# Count occurrences using the unique identifier
field_counts = deduplicated_df.groupBy("prefixed_value").count()

# Start the streaming query
query = field_counts.writeStream.outputMode("complete").format("console").start()

# Wait for the query to terminate (in practice, you'd add a termination condition)
query.awaitTermination()
